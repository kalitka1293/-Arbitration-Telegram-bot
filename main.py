import logging
import time
from koronaPay import price_koronaPay
from data_garantex import price_garantex
from ipakyulibank import price_ipakyulibank
from binance_price import price_binance
from unistream_price import unistream_price
import telebot
from telebot import TeleBot
import schedule
import random
from logging import basicConfig
import datetime

with open('TOKEN.txt') as f:
    TOKEN = f.read()

token = f"{TOKEN}"

bot = telebot.TeleBot(token)
logger = telebot.logger
telebot.logger.setLevel(logging.INFO)
logging.basicConfig(level=logging.INFO)

print('Run Bot')
#–ó–∞–ø—Å—É–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂
def price():
    return price_koronaPay(), price_garantex(), price_ipakyulibank(), price_binance(), unistream_price()


#–∫—Ä–∞—Å–Ω–æ–≥–æ —Å—Ç–∞–∫–∞–Ω–∞ (—Å—É–º–º–∞) –º—ã –≤—ã—á–∏—Ç–∞–µ–º 0.15%
def calculator(c: str):
    c = float(c)
    a = c*0.15/100
    a = c - a
    a = str(a)
    x = a.split('.')
    new = x[1]
    if len(new) >= 3:
        q = new[:2]
        a = x[0]+'.'+q
        return a

    return a

#–ö—É—Ä—Å 1/0,0057
#–í–º–µ—Å—Ç–æ –∑–∞–ø—è—Ç–æ–π, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ!!!!!!!
#–¶–µ–Ω–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
def calculator_uz_uzs():
    with open('exchange_rate_for_sending_UZS_from_Russia_to_Uzbekistan.txt') as f:
        rub = f.read()
    sum = str(1/float(rub))
    sum = sum.split('.')
    new_sum = sum[1][:3]
    price = sum[0]+'.'+new_sum
    return price

#—è–∫–æ—Ä—å #1 –∏–∑ –±–∏–Ω–∞–Ω—Å–∞
def anchor_binance(binance, uz):
    price = str(float(binance)/float(uz))
    price = price.split('.')
    new_price = price[1][:2]
    uzs = price[0]+'.'+new_price
    return uzs


#–í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
def spread(korona, binance, garantex, ipabank):
    dollar = 1000*float(ipabank)
    usdt = dollar/float(binance)
    rub = usdt*float(garantex)
    korona_1000 = float(korona)*1000
    spread = korona_1000-rub
    new_spread = str(spread/korona_1000*100)
    sum = new_spread.split('.')
    new_sum = sum[1][:2]
    price = sum[0] + '.' + new_sum
    return price


#–°–ø—Ä–µ–¥ Unistream (binance, garantex)
def calculator_unistream(bin, garan, uni):
    anchor = float(bin)/float(uni)
    difference = float(garan) - anchor
    spread = str(difference/anchor*100)
    spread = spread.split('.')
    new_list = spread[1][:3]
    spread = spread[0]+'.'+new_list
    return spread

#–°–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏(–ß—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è)
keyboard = telebot.types.InlineKeyboardMarkup()
button = telebot.types.InlineKeyboardButton(text='', callback_data='start')
keyboard.add(button)

#–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
@bot.message_handler()
def job(message):
    korona, garantex, ipabank, binance, unistream = price()
    dt = datetime.datetime.now()
    bot.send_message(message.chat.id,
                     f'''üóìÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ {dt.strftime("%d %B %Y  %H:%M:%S")}\n–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ ‚ÇÆ: {garantex[0]} ‚ÇΩ\n–ß–∏—Å—Ç—ã–π –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ ‚ÇÆ: {calculator(garantex[0])} ‚ÇΩ\n–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ ‚ÇÆ: {garantex[1]} ‚ÇΩ\n
üá∫üáøKoronaPay UZ  ‚ÇΩ‚Üí$ ‚Üí : {korona} ‚ÇΩ\n üá∫üáøKoronaPay $: {spread(korona, binance, calculator(garantex[0]), ipabank)}%\nüá∫üáøKoronaPay UZ ‚ÇΩ‚ÜíUZS ‚Üí : {calculator_uz_uzs()} UZS \n
üá∫üáøUSDT KoronaPay UZS: {anchor_binance(binance, calculator_uz_uzs())} ‚ÇΩ\n
üü°Unistream ‚ÇΩ‚ÜíUZS ‚Üí : {unistream} UZS\nüü°Unistream: {calculator_unistream(binance, calculator(garantex[0]), unistream)}%\nBinance USDT: {binance} UZS\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∂–º–∏ /start''', reply_markup=keyboard)
    bot.register_next_step_handler(message = message, function=start(message))

#–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞
def start(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑ –≤ (x) –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
    def xxx(message):
        dt = datetime.datetime.now()
        korona, garantex, ipabank, binance, unistream = price()
        bot.edit_message_text(chat_id=message.chat.id, text=f'''üóìÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ {dt.strftime("%d %B %Y  %H:%M:%S")}\n–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ ‚ÇÆ: {garantex[0]} ‚ÇΩ\n–ß–∏—Å—Ç—ã–π –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ ‚ÇÆ: {calculator(garantex[0])} ‚ÇΩ\n–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ ‚ÇÆ: {garantex[1]} ‚ÇΩ\n
üá∫üáøKoronaPay UZ  ‚ÇΩ‚Üí$ ‚Üí : {korona} ‚ÇΩ\n üá∫üáøKoronaPay $: {spread(korona, binance, calculator(garantex[0]), ipabank)}% \n üá∫üáøKoronaPay UZ ‚ÇΩ‚ÜíUZS ‚Üí : {calculator_uz_uzs()} UZS \n
üá∫üáøUSDT KoronaPay UZS: {anchor_binance(binance, calculator_uz_uzs())} ‚ÇΩ\n
üü°Unistream ‚ÇΩ‚ÜíUZS ‚Üí : {unistream} UZS\n üü°Unistream: {calculator_unistream(binance, calculator(garantex[0]), unistream)}%\nBinance USDT: {binance} UZS\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∂–º–∏ /start''',message_id=message.id + 1, reply_markup=keyboard), print("onlain send")



#–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–ø—Ä–µ–¥ > 1.1%
    #–°–¥–µ–ª–∞—Ç—å time.sleep
    def spread_1_1(message):
        korona, garantex, ipabank, binance, unistream = price()
        new_spread = spread(korona,binance,calculator(garantex[0]), ipabank)
        dt = datetime.datetime.now()
        if float(new_spread) > 0.1:
            bot.send_message(message.chat.id,
                             f'''üóìÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ {dt.strftime("%d %B %Y  %H:%M:%S")}\n–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ ‚ÇÆ: {garantex[0]} ‚ÇΩ\n–ß–∏—Å—Ç—ã–π –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ ‚ÇÆ: {calculator(garantex[0])} ‚ÇΩ\n–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ ‚ÇÆ: {garantex[1]} ‚ÇΩ\n
üá∫üáøKoronaPay UZ  ‚ÇΩ‚Üí$ ‚Üí : {korona} ‚ÇΩ\nüá∫üáøKoronaPay $: {spread(korona, binance, calculator(garantex[0]), ipabank)}% \n üá∫üáøKoronaPay UZ ‚ÇΩ‚ÜíUZS ‚Üí : {calculator_uz_uzs()} UZS \n
üá∫üáøUSDT KoronaPay UZS: {anchor_binance(binance, calculator_uz_uzs())} ‚ÇΩ\n
üü°Unistream ‚ÇΩ‚ÜíUZS ‚Üí : {unistream} UZS\n üü°Unistream: {calculator_unistream(binance, calculator(garantex[0]), unistream)}%\nBinance USDT: {binance} UZS\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∂–º–∏ /start''',
                             reply_markup=keyboard), print('send message, spread >1.1%')






#–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø—Ä–µ–¥–∞, –µ—Å–ª–∏ —Å–ø—Ä–µ–¥ >1.1% –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    schedule.every(15).minutes.do(spread_1_1, message=message)
    #–û—Ç–ø—Ä–∞–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ —Ä–∞–∑ –≤ (x) –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
    schedule.every(25).minutes.do(xxx, message=message)
#–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    while True:
        schedule.run_pending()
        time.sleep(2)

bot.infinity_polling(skip_pending=True)

























# def start(message):
#     qwe = bot.send_message(-1001744892019, 'Run Bot')
#     schedule.every(1).seconds.do(qwe)
#     while True:
#         schedule.run_pending()
#
#
#
# def job(message):
#     # korona, garantex, ipak = price()
#     # bot.send_message(-1001744892019, f'–ö–æ—Ä–æ–Ω–∞:{korona},\n –ì–∞—Ä–∞–Ω—Ç–µ–∫—Å: {garantex},\n –ò–ø–∞–∫–±–∞–Ω–∫:{ipak}' )
#     bot.send_message(-1001744892019, 'While Bot')
# def restart_message():
#     schedule.every(1).seconds.do(job)
#     while True:
#         schedule.run_pending()
#         time.sleep(1)

















# storage = MemoryStorage()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
# dp = Dispatcher(bot, storage=storage)  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
# # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# logging.basicConfig(filemode='test.log', level=logging.INFO)
# loop = asyncio.get_event_loop()
#
# def price():
#     time.sleep(3)
#     return price_koronaPay(), price_garantex(), price_ipakyulibank()
#
# async def start_price():
#     return await loop.run_in_executor(None, price)
#
# async def message(text):
#     await bot.send_message(915510200, text)
#
#
#
# @dp.message_handler()
# async def main():
#     task1 = asyncio.create_task(price())
#     task2 = asyncio.create_task(message(price()))
#
#     await task1
#     asyncio.sleep(1)
#     await task2
#     await bot.send_message(915510200, f"12")
#
# asyncio.run(main())
# aioschedule.every(15).seconds.do(price)
#
# loop = asyncio.get_event_loop()
# while True:
#     loop.run_until_complete(aioschedule.run_pending())
#
# executor.start_polling(dp, on_startup=on_startup())
